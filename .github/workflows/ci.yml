name: CI

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Ensure Docker and Docker Compose are installed
        run: |
          if ! command -v docker > /dev/null; then
            echo "Docker not found. Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y docker.io
          else
            echo "Docker is already installed."
          fi
          if ! command -v docker-compose > /dev/null; then
            echo "Docker Compose not found. Installing Docker Compose..."
            sudo apt-get update
            sudo apt-get install -y docker-compose
          else
            echo "Docker Compose is already installed."
          fi
      - name: Create rss.env from secrets
        run: |
          cat <<EOF > rss.env
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST_AUTH_METHOD=${{ secrets.POSTGRES_HOST_AUTH_METHOD }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          PYTHONPATH=${{ secrets.PYTHONPATH }}
          REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
          EOF
      - name: Build and start all services with docker-compose
        run: docker-compose up -d --build
      - name: Show logs if failed
        if: failure()
        run: docker-compose logs
      - name: Run backend tests in container
        run: |
          docker-compose exec -T backend pytest
      - name: Run frontend tests in container
        run: |
          docker-compose exec -T frontend npx vitest run
      - name: Stop all containers
        if: always()
        run: docker-compose down -v
